/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package notification;

import connection.Connector;
import connection.ConnectorNew;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author root
 */
public class notify extends javax.swing.JFrame {
    
    String notID, prodID, location, desc, type, status, adDate, stockID;
    String notID1, prodID1, location1, desc1, type1, status1, adDate1, stockID1;
    
    
    String query;
    String query1;
    String query2;
    String query3;
    Statement stmt = null;
    Statement stmt1 = null;
    Statement stmt2 = null;
    Statement stmt3 = null;
    ResultSet rs = null;
    ResultSet rs1 = null;
    ResultSet rs2 = null;
    ResultSet rs3 = null;
    
   
    int initialCount = 0;
    int actualCount = 0;
    int initialCount1 = 0;
    int actualCount1 = 0;
    
    List<String> initialArr = new ArrayList<String>();
    List<String> initialArr1 = new ArrayList<String>();
    List<String> actualArr = new ArrayList<String>();
    List<String> actualArr1 = new ArrayList<String>();
    
    /**
     * Creates new form notify
     */
    public notify() {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        prID.setVisible(false);
        rawID.setVisible(false);
        stockTemp.setVisible(false);
        stockTemp1.setVisible(false);
        showTable();
        showTable1();
        initProductCount();
        initRawCount();
        initTableRecords();
        initRawTableRecords();
        syncTable();
        syncTable1();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wind = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        notifi = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        notPr_table = new javax.swing.JTable();
        title2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        title3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        notPr_table1 = new javax.swing.JTable();
        btn_allread = new javax.swing.JButton();
        btn_allread1 = new javax.swing.JButton();
        rawID = new javax.swing.JTextField();
        btn_allread2 = new javax.swing.JButton();
        btn_allread3 = new javax.swing.JButton();
        btn_unread1 = new javax.swing.JButton();
        loc = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        btn_read2 = new javax.swing.JButton();
        loc1 = new javax.swing.JTextField();
        stockTemp = new javax.swing.JTextField();
        btn_read3 = new javax.swing.JButton();
        prID = new javax.swing.JTextField();
        stockTemp1 = new javax.swing.JTextField();
        btn_read1 = new javax.swing.JButton();
        btn_read = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        btn_unread = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        stk_desc = new javax.swing.JTextArea();
        Location = new javax.swing.JLabel();
        Description = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        raw_desc = new javax.swing.JTextArea();
        back1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        wind.setBackground(new java.awt.Color(0, 102, 204));
        wind.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        wind.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 66, -1, 132));

        jLabel5.setFont(new java.awt.Font("Calibri", 1, 28)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Toothpaste");
        wind.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 450, -1, 30));

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logof.png"))); // NOI18N
        wind.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 380, 220, 90));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/dash2.png"))); // NOI18N
        wind.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, 220, 190));

        notifi.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        notifi.setForeground(new java.awt.Color(255, 255, 255));
        wind.add(notifi, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, -1, -1));

        getContentPane().add(wind, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 360, 720));

        notPr_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "notID", "prodID", "location", "description", "type", "status", "addedDate", "stockID"
            }
        ));
        notPr_table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        notPr_table.setPreferredSize(new java.awt.Dimension(1366, 1366));
        notPr_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notPr_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(notPr_table);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 190, 490, 240));

        title2.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        title2.setForeground(new java.awt.Color(255, 255, 255));
        title2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title2.setText("Raw Material Notifications");
        getContentPane().add(title2, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 70, 550, 30));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jSeparator1.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 80, 40, 630));

        title3.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        title3.setForeground(new java.awt.Color(255, 255, 255));
        title3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title3.setText("Product Notifications");
        getContentPane().add(title3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, 470, 30));

        notPr_table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "notID", "rawID", "location", "description", "type", "status", "addedDate", "stockID"
            }
        ));
        notPr_table1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        notPr_table1.setPreferredSize(new java.awt.Dimension(1366, 1366));
        notPr_table1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notPr_table1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(notPr_table1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 190, 470, 240));

        btn_allread.setBackground(java.awt.Color.blue);
        btn_allread.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btn_allread.setForeground(new java.awt.Color(255, 255, 255));
        btn_allread.setText("Mark all as Unread");
        btn_allread.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_allread.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_allreadActionPerformed(evt);
            }
        });
        getContentPane().add(btn_allread, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 450, 130, 30));

        btn_allread1.setBackground(java.awt.Color.blue);
        btn_allread1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btn_allread1.setForeground(new java.awt.Color(255, 255, 255));
        btn_allread1.setText("Mark all as Read");
        btn_allread1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_allread1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_allread1ActionPerformed(evt);
            }
        });
        getContentPane().add(btn_allread1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 450, 130, 30));
        getContentPane().add(rawID, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 50, 70, -1));

        btn_allread2.setBackground(java.awt.Color.blue);
        btn_allread2.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btn_allread2.setForeground(new java.awt.Color(255, 255, 255));
        btn_allread2.setText("Mark all as Read");
        btn_allread2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_allread2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_allread2ActionPerformed(evt);
            }
        });
        getContentPane().add(btn_allread2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 450, 130, 30));

        btn_allread3.setBackground(java.awt.Color.blue);
        btn_allread3.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btn_allread3.setForeground(new java.awt.Color(255, 255, 255));
        btn_allread3.setText("Mark all as Unread");
        btn_allread3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_allread3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_allread3ActionPerformed(evt);
            }
        });
        getContentPane().add(btn_allread3, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 450, 130, 30));

        btn_unread1.setBackground(java.awt.Color.blue);
        btn_unread1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btn_unread1.setForeground(new java.awt.Color(255, 255, 255));
        btn_unread1.setText("Show All Unread");
        btn_unread1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_unread1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_unread1ActionPerformed(evt);
            }
        });
        getContentPane().add(btn_unread1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 120, 110, 50));

        loc.setEditable(false);
        loc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locActionPerformed(evt);
            }
        });
        getContentPane().add(loc, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 550, 350, 30));

        jButton6.setBackground(java.awt.Color.blue);
        jButton6.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Show All");
        jButton6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 120, 100, 50));

        btn_read2.setBackground(java.awt.Color.blue);
        btn_read2.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btn_read2.setForeground(new java.awt.Color(255, 255, 255));
        btn_read2.setText("Mark as Read");
        btn_read2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_read2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_read2ActionPerformed(evt);
            }
        });
        getContentPane().add(btn_read2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 490, 130, 30));

        loc1.setEditable(false);
        getContentPane().add(loc1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 550, 350, 30));
        getContentPane().add(stockTemp, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 40, 70, -1));

        btn_read3.setBackground(java.awt.Color.blue);
        btn_read3.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btn_read3.setForeground(new java.awt.Color(255, 255, 255));
        btn_read3.setText("Mark as Unread");
        btn_read3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_read3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_read3ActionPerformed(evt);
            }
        });
        getContentPane().add(btn_read3, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 490, 130, 30));
        getContentPane().add(prID, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 50, 70, -1));
        getContentPane().add(stockTemp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 30, 60, -1));

        btn_read1.setBackground(java.awt.Color.blue);
        btn_read1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btn_read1.setForeground(new java.awt.Color(255, 255, 255));
        btn_read1.setText("Mark as Unread");
        btn_read1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_read1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_read1ActionPerformed(evt);
            }
        });
        getContentPane().add(btn_read1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 490, 130, 30));

        btn_read.setBackground(java.awt.Color.blue);
        btn_read.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btn_read.setForeground(new java.awt.Color(255, 255, 255));
        btn_read.setText("Mark as Read");
        btn_read.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_read.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_readActionPerformed(evt);
            }
        });
        getContentPane().add(btn_read, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 490, 130, 30));

        jButton5.setBackground(java.awt.Color.blue);
        jButton5.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Show All");
        jButton5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 120, 110, 50));

        btn_unread.setBackground(java.awt.Color.blue);
        btn_unread.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btn_unread.setForeground(new java.awt.Color(255, 255, 255));
        btn_unread.setText("Show All Unread");
        btn_unread.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btn_unread.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_unreadActionPerformed(evt);
            }
        });
        getContentPane().add(btn_unread, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 120, 110, 50));

        title.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        title.setForeground(new java.awt.Color(255, 255, 255));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Notification Panel");
        getContentPane().add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 0, 1010, 100));

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel2.setForeground(java.awt.Color.white);
        jLabel2.setText("Location");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 560, 110, -1));

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel4.setForeground(java.awt.Color.white);
        jLabel4.setText("Description");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 620, -1, -1));

        stk_desc.setEditable(false);
        stk_desc.setColumns(20);
        stk_desc.setRows(5);
        stk_desc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stk_descMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(stk_desc);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 610, 350, -1));

        Location.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        Location.setForeground(java.awt.Color.white);
        Location.setText("Location");
        getContentPane().add(Location, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 560, -1, -1));

        Description.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        Description.setForeground(java.awt.Color.white);
        Description.setText("Description");
        getContentPane().add(Description, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 610, -1, -1));

        raw_desc.setEditable(false);
        raw_desc.setColumns(20);
        raw_desc.setRows(5);
        jScrollPane4.setViewportView(raw_desc);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 610, 350, -1));

        back1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gray2.png"))); // NOI18N
        getContentPane().add(back1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 1380, 730));

        setSize(new java.awt.Dimension(1382, 759));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void syncTable() {
        
        
        Timer t = new Timer(4000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateProductCount();
                updateTableRecords();
                
            }

           
        });
        t.start();
        
    }
    
    public void syncTable1() {
        
        
        Timer t = new Timer(4000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               
              updateRawCount();
              updateRawTableRecords();  
                
                
            }

           
        });
        t.start();
        
    }
    
    public void initProductCount() {
        
        Connection conn = new ConnectorNew().ConnectorNew();
        query1 = "select count(*) from notify_prod";
        
        try {

            stmt1 = conn.createStatement();
            rs1 = stmt1.executeQuery(query1);
            while (rs1.next()) {
                initialCount = rs1.getInt("count(*)");
            }
           
            conn.close();
        } 
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }
    
    
    public void initRawCount() {
        
        Connection conn = new ConnectorNew().ConnectorNew();
        query1 = "select count(*) from notify_raw";
        
        try {

            stmt1 = conn.createStatement();
            rs1 = stmt1.executeQuery(query1);
            while (rs1.next()) {
                initialCount1 = rs1.getInt("count(*)");
            }
           
            conn.close();
        } 
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }
    
    public void updateProductCount() {
        
        Connection conn = new ConnectorNew().ConnectorNew();
        query1 = "select count(*) from notify_prod";
        
        try {

            stmt1 = conn.createStatement();
            rs1 = stmt1.executeQuery(query1);
            while (rs1.next()) {
                actualCount = rs1.getInt("count(*)");
            }

             if(initialCount != actualCount) {
                initialCount = actualCount;
                DefaultTableModel model = (DefaultTableModel) notPr_table.getModel();
                model.setRowCount(0);
                showTable();
                
            }
            
            conn.close();
        } 
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }
    
    public void updateRawCount() {
        
     Connection conn = new ConnectorNew().ConnectorNew();
     query1 = "select count(*) from notify_raw";
        
        try {

            stmt1 = conn.createStatement();
            rs1 = stmt1.executeQuery(query1);
            while (rs1.next()) {
                actualCount1 = rs1.getInt("count(*)");
            }

             if(initialCount1 != actualCount1) {
                initialCount1 = actualCount1;
                DefaultTableModel model = (DefaultTableModel) notPr_table1.getModel();
                model.setRowCount(0);
                showTable1();
                
            }
            
            conn.close();
        } 
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }
    
    
    
    
    public void initTableRecords() {
        
        Connection conn = new ConnectorNew().ConnectorNew();
        query1 = "select * from notify_prod";
        
        try {

            
                stmt1 = conn.createStatement();
                rs1 = stmt1.executeQuery(query1);
                while (rs1.next()) {
                    initialArr.add(rs1.getString("updDate")) ;
                }
            
            
             conn.close();
            
        } 
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }
    
    
    
    public void updateTableRecords() {
        
        Connection conn = new ConnectorNew().ConnectorNew();
        query1 = "select * from notify_prod";
        
        try {
            
            
                stmt1 = conn.createStatement();
                rs1 = stmt1.executeQuery(query1);
                actualArr.clear();
                while (rs1.next()) {
                    actualArr.add(rs1.getString("updDate")) ;
                }
            
                if(initialArr.size() != actualArr.size()) {
                    initialArr.clear();
                    initTableRecords();
                }
                    
                    for(int i=0; i<actualArr.size(); i++) {
                        if( !(actualArr.get(i).equals(initialArr.get(i))) ) {
                            DefaultTableModel model = (DefaultTableModel) notPr_table.getModel();
                            model.setRowCount(0);
                            showTable();
                            initialArr.clear();
                            initTableRecords();
                            break;
                        }
                    }
           
                  conn.close();
        } 
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }
    
    
    
    
    
    public void initRawTableRecords() {
        
        query1 = "select * from notify_raw";
        Connection conn = new ConnectorNew().ConnectorNew();
        
        try {

            
                stmt1 = conn.createStatement();
                rs1 = stmt1.executeQuery(query1);
                while (rs1.next()) {
                    initialArr1.add(rs1.getString("updDate")) ;
                }
            
            
             conn.close();
            
        } 
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }
    
    
    public void updateRawTableRecords() {
        
        query1 = "select * from notify_raw";
        Connection conn = new ConnectorNew().ConnectorNew();
        
        try {
            
            
                stmt1 = conn.createStatement();
                rs1 = stmt1.executeQuery(query1);
                actualArr1.clear();
                while (rs1.next()) {
                    actualArr1.add(rs1.getString("updDate")) ;
                }
            
                if(initialArr1.size() != actualArr1.size()) {
                    initialArr1.clear();
                    initRawTableRecords();
                }
                    
                    for(int i=0; i<actualArr1.size(); i++) {
                        if( !(actualArr1.get(i).equals(initialArr1.get(i))) ) {
                            DefaultTableModel model = (DefaultTableModel) notPr_table1.getModel();
                            model.setRowCount(0);
                            showTable1();
                            initialArr1.clear();
                            initRawTableRecords();
                        }
                    }
           conn.close();

        } 
        catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }
    
    
    
    public void clear() {
        prID.setText("");
    }
    
     public void clear1() {
        rawID.setText("");
    }
    
    public notify(String notID, String prodID, String location, String desc, String type, String status, String adDate, String stockID) {
        this.notID = notID;
        this.prodID = prodID;
        this.location = location;
        this.desc = desc;
        this.type = type;
        this.status = status;
        this.adDate = adDate;
        this.stockID = stockID;
        
    }
    
    public notify(String notID1, String prodID1, String location1, String desc1, String type1, String status1, String adDate1, int i, String stockID1) {
        this.notID1 = notID1;
        this.prodID1 = prodID1;
        this.location1 = location1;
        this.desc1 = desc1;
        this.type1 = type1;
        this.status1 = status1;
        this.adDate1 = adDate1;
        this.stockID1 = stockID1;
        
    }
    
    
    public void markAllAsRead() {
        query = " UPDATE notify_prod SET status = ?, updDate = NOW()  ";
        query1 = " UPDATE notify_prod SET updDate = NOW()  ";
        
        //String query1 = " INSERT INTO notify_prod(prodID, description, adDate) VALUES ('"+prodID+"', '"+stockName+"', NOW() ) ";
          
         try {
                    Connection conn = new ConnectorNew().ConnectorNew();
                    
                    PreparedStatement pst = conn.prepareStatement(query);
                    pst.setString(1, "read");
                    pst.executeUpdate();
                    JOptionPane.showMessageDialog(null, "All Stock Product notifications have been marked as read", "Success", JOptionPane.INFORMATION_MESSAGE);
                    DefaultTableModel model = (DefaultTableModel)notPr_table.getModel();
                    model.setRowCount(0);
                    showTable();
                    clear();
                    
                    //stmt1 = conn.createStatement();
                    //stmt1.executeUpdate(query1);
                   
                    conn.close();
              }
         
              
         
                
                catch(SQLIntegrityConstraintViolationException ex) {
                     JOptionPane.showMessageDialog(null, "Error", "Error", JOptionPane.ERROR_MESSAGE);
                     ex.printStackTrace();
                }
         
                 catch(SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }   
                
         
                
         
                catch (Exception ex) {
                    ex.printStackTrace();
                }
    }
    
    
     public void markAllAsRead1() {
        query = " UPDATE notify_raw SET status = ?, updDate = NOW() ";
      
       
        //String query1 = " INSERT INTO notify_prod(prodID, description, adDate) VALUES ('"+prodID+"', '"+stockName+"', NOW() ) ";
          
         try {
              
                    Connection conn = new ConnectorNew().ConnectorNew();
                    
                    PreparedStatement pst = conn.prepareStatement(query);
                    pst.setString(1, "read");
                    pst.executeUpdate();
                    JOptionPane.showMessageDialog(null, "All Stock Material notifications have been marked as read", "Success", JOptionPane.INFORMATION_MESSAGE);
                    DefaultTableModel model = (DefaultTableModel)notPr_table1.getModel();
                    model.setRowCount(0);
                    showTable1();
                    clear1();
                    
                    
                
                    conn.close();
              }
              
         
                
                catch(SQLIntegrityConstraintViolationException ex) {
                     JOptionPane.showMessageDialog(null, "Error", "Error", JOptionPane.ERROR_MESSAGE);
                     ex.printStackTrace();
                }
         
                 catch(SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }   
                
         
                
         
                catch (Exception ex) {
                    ex.printStackTrace();
                }
    }
     
     
    public void markAllAsUnRead() {
        query = " UPDATE notify_prod SET status = ?, updDate = NOW() ";
        query1 = " UPDATE notify_prod SET updDate = NOW()  ";

        
        //String query1 = " INSERT INTO notify_prod(prodID, description, adDate) VALUES ('"+prodID+"', '"+stockName+"', NOW() ) ";
          
         try {
                    Connection conn = new ConnectorNew().ConnectorNew();
             
                    PreparedStatement pst = conn.prepareStatement(query);
                    pst.setString(1, "notRead");
                    pst.executeUpdate();
                    JOptionPane.showMessageDialog(null, "All Stock Product notifications have been marked as Not Read", "Success", JOptionPane.INFORMATION_MESSAGE);
                    DefaultTableModel model = (DefaultTableModel)notPr_table.getModel();
                    model.setRowCount(0);
                    showTable();
                    clear();
                   
                    //stmt1 = conn.createStatement();
                    //stmt1.executeUpdate(query1);
                    
                    conn.close();
              }
         
              
         
                
                catch(SQLIntegrityConstraintViolationException ex) {
                     JOptionPane.showMessageDialog(null, "Error", "Error", JOptionPane.ERROR_MESSAGE);
                     ex.printStackTrace();
                }
         
                 catch(SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }   
                
         
                
         
                catch (Exception ex) {
                    ex.printStackTrace();
                }
    } 
    
    
    
    public void markAllAsUnRead1() {
        query = " UPDATE notify_raw SET status = ?, updDate = NOW() ";
        query1 = " UPDATE notify_raw SET updDate = NOW()  ";

       
        //String query1 = " INSERT INTO notify_prod(prodID, description, adDate) VALUES ('"+prodID+"', '"+stockName+"', NOW() ) ";
          
         try {
                    Connection conn = new ConnectorNew().ConnectorNew();
                    PreparedStatement pst = conn.prepareStatement(query);
                    pst.setString(1, "notRead");
                    pst.executeUpdate();
                    JOptionPane.showMessageDialog(null, "All Stock Material notifications have been marked as Not Read", "Success", JOptionPane.INFORMATION_MESSAGE);
                    DefaultTableModel model = (DefaultTableModel)notPr_table1.getModel();
                    model.setRowCount(0);
                    showTable1();
                    clear1();
                    
                    //stmt1 = conn.createStatement();
                    //stmt1.executeUpdate(query1);
                    
                    conn.close();
                   
              }
         
              
         
                
                catch(SQLIntegrityConstraintViolationException ex) {
                     JOptionPane.showMessageDialog(null, "Error", "Error", JOptionPane.ERROR_MESSAGE);
                     ex.printStackTrace();
                }
         
                 catch(SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }   
                
         
                
         
                catch (Exception ex) {
                    ex.printStackTrace();
                }
    } 
     
     
    public void markAsRead() {
        String ID = prID.getText();
        String locTemp = loc.getText();
        String stckIDTemp = stockTemp.getText();
        query = " UPDATE notify_prod SET status = 'read', updDate = NOW() where notID = '"+ID+"'";
       
        //String query1 = " INSERT INTO notify_prod(prodID, description, adDate) VALUES ('"+prodID+"', '"+stockName+"', NOW() ) ";
          
         try {
                    Connection conn = new ConnectorNew().ConnectorNew();
                    stmt1 = conn.createStatement();
                    if(stmt1.executeUpdate(query) == 1) {
                        JOptionPane.showMessageDialog(null, "Notification successfully marked as read", "Success", JOptionPane.INFORMATION_MESSAGE);
                        DefaultTableModel model = (DefaultTableModel)notPr_table.getModel();
                        model.setRowCount(0);
                        showTable();
                        clear();
                        conn.close();
                         
                      
                        
                    }
                    
                   
                   
              }
         
              
         
                
                catch(SQLIntegrityConstraintViolationException ex) {
                     JOptionPane.showMessageDialog(null, "Error", "Error", JOptionPane.ERROR_MESSAGE);
                     ex.printStackTrace();
                }
         
                 catch(SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }   
                
         
                
         
                catch (Exception ex) {
                    ex.printStackTrace();
                }
    } 
    
    
    public void markAsRead1() {
        String ID = rawID.getText();
        String locTemp = loc1.getText();
        String stckIDTemp = stockTemp1.getText();
        query = " UPDATE notify_raw SET status = 'read', updDate = NOW() where notID = '"+ID+"'";
       
        //String query1 = " INSERT INTO notify_prod(prodID, description, adDate) VALUES ('"+prodID+"', '"+stockName+"', NOW() ) ";
          
         try {
                    Connection conn = new ConnectorNew().ConnectorNew();
                    stmt1 = conn.createStatement();
                    if(stmt1.executeUpdate(query) == 1) {
                        JOptionPane.showMessageDialog(null, "Notification successfully marked as read", "Success", JOptionPane.INFORMATION_MESSAGE);
                        DefaultTableModel model = (DefaultTableModel)notPr_table1.getModel();
                        model.setRowCount(0);
                        showTable1();
                        clear1();
                        conn.close();
                         
                        
                    }
                    
                   
                   
              }
         
              
         
                
                catch(SQLIntegrityConstraintViolationException ex) {
                     JOptionPane.showMessageDialog(null, "Error", "Error", JOptionPane.ERROR_MESSAGE);
                     ex.printStackTrace();
                }
         
                 catch(SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }   
                
         
                
         
                catch (Exception ex) {
                    ex.printStackTrace();
                }
    } 
    
    
    
    public void markAsReadUnread() {
        String ID = prID.getText();
        String locTemp = loc.getText();
        String stckIDTemp = stockTemp.getText();
        
        query = " UPDATE notify_prod SET status = 'notRead', updDate = NOW()  where notID = '"+ID+"' "; 
       
        //String query1 = " INSERT INTO notify_prod(prodID, description, adDate) VALUES ('"+prodID+"', '"+stockName+"', NOW() ) ";
          
         try {
                    Connection conn = new ConnectorNew().ConnectorNew();
                    stmt1 = conn.createStatement();
                    if(stmt1.executeUpdate(query) == 1) {
                        JOptionPane.showMessageDialog(null, "Notification successfully marked as Not Read", "Success", JOptionPane.INFORMATION_MESSAGE);
                        DefaultTableModel model = (DefaultTableModel)notPr_table.getModel();
                        model.setRowCount(0);
                        showTable();
                        clear();
                        conn.close();
                         
                       
                    }
                    
                   
                   
              }
         
              
         
                
                catch(SQLIntegrityConstraintViolationException ex) {
                     JOptionPane.showMessageDialog(null, "Error", "Error", JOptionPane.ERROR_MESSAGE);
                     ex.printStackTrace();
                }
         
                 catch(SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }   
                
         
                
         
                catch (Exception ex) {
                    ex.printStackTrace();
                }
    } 
    
    
    
    public void markAsReadUnread1() {
        String ID = rawID.getText();
        String locTemp = loc1.getText();
        String stckIDTemp = stockTemp1.getText();
        query = " UPDATE notify_raw SET status = 'notRead', updDate = NOW() where notID = '"+ID+"' ";
       
        //String query1 = " INSERT INTO notify_prod(prodID, description, adDate) VALUES ('"+prodID+"', '"+stockName+"', NOW() ) ";
          
         try {
                    Connection conn = new ConnectorNew().ConnectorNew();
                    stmt1 = conn.createStatement();
                    if(stmt1.executeUpdate(query) == 1) {
                        JOptionPane.showMessageDialog(null, "Notification successfully marked as Not Read", "Success", JOptionPane.INFORMATION_MESSAGE);
                        DefaultTableModel model = (DefaultTableModel)notPr_table1.getModel();
                        model.setRowCount(0);
                        showTable1();
                        clear1();
                        conn.close();
                         
                        
                    }
                    
                   
                   
              }
         
              
         
                
                catch(SQLIntegrityConstraintViolationException ex) {
                     JOptionPane.showMessageDialog(null, "Error", "Error", JOptionPane.ERROR_MESSAGE);
                     ex.printStackTrace();
                }
         
                 catch(SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }   
                
         
                
         
                catch (Exception ex) {
                    ex.printStackTrace();
                }
    } 
    
    
    
    
    public ArrayList<notify> getProdNotifyList() {
        
        ArrayList<notify> ProdNotifyList = new ArrayList<notify>();
      
        query = "select * from notify_prod order by notID desc";
        
        try {
            Connection conn = new ConnectorNew().ConnectorNew();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(query);
            notify notPr;
            while (rs.next()) {
                notPr = new notify(
                        rs.getString("notID"),
                        rs.getString("prodID"),
                        rs.getString("location"),
                        rs.getString("description"),
                        rs.getString("type"),
                        rs.getString("status"),
                        rs.getString("adDate"),
                        rs.getString("stockID"));
                
                ProdNotifyList.add(notPr);
            }
            
            conn.close();
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        return ProdNotifyList;
        
    }
    
    
    public void showTable() {
        
        ArrayList<notify> list = getProdNotifyList();
        DefaultTableModel model = (DefaultTableModel) notPr_table.getModel();
        Object[] row = new Object[8];
        
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).notID;
            row[1] = list.get(i).prodID;
            row[2] = list.get(i).location;
            row[3] = list.get(i).desc;
            row[4] = list.get(i).type;
            row[5] = list.get(i).status;
            row[6] = list.get(i).adDate;
            row[7] = list.get(i).stockID;
         
            model.addRow(row);
            
        }
        
    }
    
    
    
    public ArrayList<notify> getProdNotifyListUnread() {
        
        ArrayList<notify> ProdNotifyListUnread = new ArrayList<notify>();
        
        query = "select * from notify_prod where status = 'notRead' AND order by notID desc";
        
        try {
            Connection conn = new ConnectorNew().ConnectorNew();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(query);
            notify notPr;
            while (rs.next()) {
                notPr = new notify(
                        rs.getString("notID"),
                        rs.getString("prodID"),
                        rs.getString("location"),
                        rs.getString("description"),
                        rs.getString("type"),
                        rs.getString("status"),
                        rs.getString("adDate"),
                        rs.getString("stockID"));
                
                ProdNotifyListUnread.add(notPr);
            }
            
            conn.close();
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        return ProdNotifyListUnread;
        
    }
    
    
    public void showTableUnread() {
        
        ArrayList<notify> list = getProdNotifyListUnread();
        DefaultTableModel model = (DefaultTableModel) notPr_table.getModel();
        Object[] row = new Object[8];
        
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).notID;
            row[1] = list.get(i).prodID;
            row[2] = list.get(i).location;
            row[3] = list.get(i).desc;
            row[4] = list.get(i).type;
            row[5] = list.get(i).status;
            row[6] = list.get(i).adDate;
            row[7] = list.get(i).stockID;
         
            model.addRow(row);
            
        }
        
    }
    
    
    
    public ArrayList<notify> getRawNotifyListUnread() {
        
        ArrayList<notify> RawNotifyListUnread = new ArrayList<notify>();
       
        query = "select * from notify_raw where status = 'notRead' AND order by notID desc";
        
        try {
            Connection conn = new ConnectorNew().ConnectorNew();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(query);
            notify notPr;
            while (rs.next()) {
                notPr = new notify(
                        rs.getString("notID"),
                        rs.getString("rawID"),
                        rs.getString("location"),
                        rs.getString("description"),
                        rs.getString("type"),
                        rs.getString("status"),
                        rs.getString("adDate"),
                        rs.getInt("stockID"),
                        rs.getString("stockID"));
                
                RawNotifyListUnread.add(notPr);
            }
           conn.close();
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        return RawNotifyListUnread;
        
    }
    
    
    public void showTableUnread1() {
        
        ArrayList<notify> list = getRawNotifyListUnread();
        DefaultTableModel model = (DefaultTableModel) notPr_table1.getModel();
        Object[] row = new Object[8];
        
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).notID1;
            row[1] = list.get(i).prodID1;
            row[2] = list.get(i).location1;
            row[3] = list.get(i).desc1;
            row[4] = list.get(i).type1;
            row[5] = list.get(i).status1;
            row[6] = list.get(i).adDate1;
            row[7] = list.get(i).stockID1;
         
            model.addRow(row);
            
        }
        
    }
    
    
    
    public ArrayList<notify> getRawNotifyList() {
        
        ArrayList<notify> RawNotifyList = new ArrayList<notify>();
      
        query = "select * from notify_raw order by notID desc";
        
        try {
            Connection conn = new ConnectorNew().ConnectorNew();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(query);
            notify rawPr;
            while (rs.next()) {
                rawPr = new notify(
                        rs.getString("notID"),
                        rs.getString("rawID"),
                        rs.getString("location"),
                        rs.getString("description"),
                        rs.getString("type"),
                        rs.getString("status"),
                        rs.getString("adDate"),
                        rs.getInt("stockID"),
                        rs.getString("stockID"));
                
                RawNotifyList.add(rawPr);
            }
            conn.close();
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        return RawNotifyList;
        
    }
    
    
    public void showTable1() {
        
        ArrayList<notify> list = getRawNotifyList();
        DefaultTableModel model = (DefaultTableModel) notPr_table1.getModel();
        Object[] row = new Object[8];
        
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).notID1;
            row[1] = list.get(i).prodID1;
            row[2] = list.get(i).location1;
            row[3] = list.get(i).desc1;
            row[4] = list.get(i).type1;
            row[5] = list.get(i).status1;
            row[6] = list.get(i).adDate1;
            row[7] = list.get(i).stockID1;
         
            model.addRow(row);
            
        }
        
    }
    
    
    private void notPr_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notPr_tableMouseClicked
        try{
        int i = notPr_table.getSelectedRow();
        
        TableModel model = notPr_table.getModel();
        prID.setText(model.getValueAt(i, 0).toString());
        stk_desc.setText(model.getValueAt(i, 3).toString());
        loc.setText(model.getValueAt(i, 2).toString());
        stockTemp.setText(model.getValueAt(i, 7).toString());
        }catch(Exception e){e.printStackTrace();}
            
    }//GEN-LAST:event_notPr_tableMouseClicked

    private void notPr_table1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notPr_table1MouseClicked

        int i = notPr_table1.getSelectedRow();
        TableModel model = notPr_table1.getModel();
        stockTemp1.setText(model.getValueAt(i, 7).toString());
        rawID.setText(model.getValueAt(i, 0).toString());
        raw_desc.setText(model.getValueAt(i, 3).toString());
        loc1.setText(model.getValueAt(i, 2).toString());
        

    }//GEN-LAST:event_notPr_table1MouseClicked

    private void btn_allreadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_allreadActionPerformed

        markAllAsUnRead();
        clear();
        
    }//GEN-LAST:event_btn_allreadActionPerformed

    private void btn_readActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_readActionPerformed
        if(prID.getText() == null || prID.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Nothing has selected", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        else {
            markAsRead();
            clear();
        }
        

    }//GEN-LAST:event_btn_readActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        DefaultTableModel model = (DefaultTableModel)notPr_table.getModel();
        model.setRowCount(0);
        showTable();
        clear();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void btn_unreadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_unreadActionPerformed

        DefaultTableModel model = (DefaultTableModel)notPr_table.getModel();
        model.setRowCount(0);
        showTableUnread();
        clear();
    }//GEN-LAST:event_btn_unreadActionPerformed

    private void btn_allread1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_allread1ActionPerformed
         markAllAsRead();
         clear();
    }//GEN-LAST:event_btn_allread1ActionPerformed

    private void btn_read1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_read1ActionPerformed
        if(prID.getText() == null || prID.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Nothing has selected", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        else {
            markAsReadUnread();
            clear();
        }
    }//GEN-LAST:event_btn_read1ActionPerformed

    private void btn_allread2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_allread2ActionPerformed
         markAllAsRead1();
         clear1();
    }//GEN-LAST:event_btn_allread2ActionPerformed

    private void btn_allread3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_allread3ActionPerformed
        markAllAsUnRead1();
        clear1();
    }//GEN-LAST:event_btn_allread3ActionPerformed

    private void btn_unread1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_unread1ActionPerformed
        DefaultTableModel model = (DefaultTableModel)notPr_table1.getModel();
        model.setRowCount(0);
        showTableUnread1();
        clear1();
    }//GEN-LAST:event_btn_unread1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        DefaultTableModel model = (DefaultTableModel)notPr_table1.getModel();
        model.setRowCount(0);
        showTable1();
        clear1();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void btn_read2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_read2ActionPerformed
        if(rawID.getText() == null || rawID.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Nothing has selected", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        else {
            markAsRead1();
            clear1();
        }
    }//GEN-LAST:event_btn_read2ActionPerformed

    private void btn_read3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_read3ActionPerformed
        if(rawID.getText() == null || rawID.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Nothing has selected", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        else {
            markAsReadUnread1();
            clear1();
        }
    }//GEN-LAST:event_btn_read3ActionPerformed

    private void locActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locActionPerformed

    private void stk_descMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stk_descMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_stk_descMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(notify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(notify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(notify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(notify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new notify().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Description;
    private javax.swing.JLabel Location;
    private javax.swing.JLabel back1;
    private javax.swing.JButton btn_allread;
    private javax.swing.JButton btn_allread1;
    private javax.swing.JButton btn_allread2;
    private javax.swing.JButton btn_allread3;
    private javax.swing.JButton btn_read;
    private javax.swing.JButton btn_read1;
    private javax.swing.JButton btn_read2;
    private javax.swing.JButton btn_read3;
    private javax.swing.JButton btn_unread;
    private javax.swing.JButton btn_unread1;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField loc;
    private javax.swing.JTextField loc1;
    private javax.swing.JTable notPr_table;
    private javax.swing.JTable notPr_table1;
    private javax.swing.JLabel notifi;
    private javax.swing.JTextField prID;
    private javax.swing.JTextField rawID;
    private javax.swing.JTextArea raw_desc;
    private javax.swing.JTextArea stk_desc;
    private javax.swing.JTextField stockTemp;
    private javax.swing.JTextField stockTemp1;
    private javax.swing.JLabel title;
    private javax.swing.JLabel title2;
    private javax.swing.JLabel title3;
    private javax.swing.JPanel wind;
    // End of variables declaration//GEN-END:variables
}
